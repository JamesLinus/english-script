<Block>
	<Assign name='$use_tree'>
		<False/>
	</Assign>
	<Call name='require_relative'>
		<Args>
			<Str>../parser_test_helper</Str>
		</Args>
	</Call>
	<Class>
		<Name name='TypeTest'/>
		<Block>
			<Call name='include'>
				<Args>
					<Const name='ParserTestHelper'/>
				</Args>
			</Call>
			<Method name='test_typed_variable'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>Int i=7</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='variableTypes'>
								<Args>
									<Str>i</Str>
								</Args>
							</Call>
							<Const name='Integer'/>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_typed_variable2'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>int i=7</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='variableTypes'>
								<Args>
									<Str>i</Str>
								</Args>
							</Call>
							<Str>Integer</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_auto_typed_variable'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>i=7</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='variableTypes'>
								<Args>
									<Str>i</Str>
								</Args>
							</Call>
							<Str>Fixnum</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type1'>
				<Args/>
				<Block>
					<Call name='init'>
						<Args>
							<Str>class of 1,2,3</Str>
						</Args>
					</Call>
					<Call name='evaluate_property'>
						<Variable name='@parser'/>
						<Arguments/>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='init'>
						<Args>
							<Str>class of [1,2,3]</Str>
						</Args>
					</Call>
					<Call name='expressions'>
						<Variable name='@parser'/>
						<Arguments/>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='skip'/>
					<Call name='parse'>
						<Args>
							<Str>class of 1,2,3</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Const name='Array'/>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type2'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>x=1,2,3;class of x</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Const name='Array'/>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>x=1,2,3;</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>type of x is Array</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type3'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>x be 1,2,3;y= class of x</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Call name='=='>
								<Call name='[]'>
									<Call name='variables'/>
									<Args>
										<Str>y</Str>
									</Args>
								</Call>
								<Args>
									<Const name='Array'/>
								</Args>
							</Call>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='type'>
								<Call name='[]'>
									<Call name='variables'/>
									<Args>
										<Str>x</Str>
									</Args>
								</Call>
								<Arguments/>
							</Call>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='class'>
								<Call name='[]'>
									<Call name='variableValues'/>
									<Args>
										<Str>x</Str>
									</Args>
								</Call>
								<Arguments/>
							</Call>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='kind'>
								<Call name='[]'>
									<Call name='variableValues'/>
									<Args>
										<Str>x</Str>
									</Args>
								</Call>
								<Arguments/>
							</Call>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='[]'>
								<Call name='variableValues'/>
								<Args>
									<Str>y</Str>
								</Args>
							</Call>
							<Const name='Array'/>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>y is a Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>y is an Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>y is Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>Array == class of x</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>class of x is Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>kind of x is Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>type of x is Array</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type4'>
				<Args/>
				<Block>
					<Assign name='[]='>
						<Call name='variables'/>
						<Array>
							<Str>x</Str>
							<Array>
								<Num value='1'/>
								<Num value='2'/>
								<Num value='3'/>
							</Array>
						</Array>
					</Assign>
					<Call name='assert'>
						<Args>
							<Str>class of x is Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>kind of x is Array</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>type of x is Array</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type_cast'>
				<Args/>
				<Block>
					<Call name='assert_result_is'>
						<Args>
							<Str>2.3</Str>
							<Float value='2.3'/>
						</Args>
					</Call>
					<Call name='parse'>
						<Args>
							<Str>int z=2.3 as int</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Num value='2'/>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_no_type_cast'>
				<Args/>
				<Block>
					<Call name='assert_equals'>
						<Args>
							<Call name='class'>
								<Call name='parse'>
									<Args>
										<Str>2.3 as int</Str>
									</Args>
								</Call>
								<Arguments/>
							</Call>
							<Const name='Fixnum'/>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='class'>
								<Call name='parse'>
									<Args>
										<Str>2.3</Str>
									</Args>
								</Call>
								<Arguments/>
							</Call>
							<Const name='Float'/>
						</Args>
					</Call>
				</Block>
			</Method>
		</Block>
		<Const name='ParserBaseTest'/>
	</Class>
</Block>
