<Block>
	<Assign name='$use_tree'>
		<False/>
	</Assign>
	<Assign name='$verbose'>
		<False/>
	</Assign>
	<Call name='require_relative'>
		<Args>
			<Str>../parser_test_helper</Str>
		</Args>
	</Call>
	<Class>
		<Name name='NumberTest'/>
		<Block>
			<Call name='include'>
				<Args>
					<Const name='ParserTestHelper'/>
				</Args>
			</Call>
			<Method name='test_type1'>
				<Args/>
				<Block>
					<Call name='puts'>
						<Args>
							<Call name='parse'>
								<Args>
									<Str>class of 1</Str>
								</Args>
							</Call>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Variable name='@result'/>
							<Const name='Fixnum'/>
						</Args>
					</Call>
					<Call name='parse'>
						<Args>
							<Str>class of 3.3</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Call name='=='>
								<Variable name='@result'/>
								<Args>
									<Const name='Float'/>
								</Args>
							</Call>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type2'>
				<Args/>
				<Block>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a Numeric</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a Float</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a float</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a real</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a float number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a real number</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_type3'>
				<Args/>
				<Block>
					<Call name='assert'>
						<Args>
							<Str>3 is a Number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is a Fixnum</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is a Numeric</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is a Integer</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_english_number_types'>
				<Args/>
				<Block>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a real number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a real</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a float</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3.2 is a float number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is a number</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is a integer</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Str>3 is an integer</Str>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='_test_int_methods'>
				<Args/>
				<Block>
					<Call name='parse'>
						<Args>
							<Str>invert 3</Str>
						</Args>
					</Call>
					<Call name='assert'>
						<Args>
							<Call name='=='>
								<Variable name='@result'/>
								<Args>
									<Str>1/3</Str>
								</Args>
							</Call>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='test_parse_float'>
				<Args/>
				<Block>
					<Call name='init'>
						<Args>
							<Str>5.0</Str>
						</Args>
					</Call>
					<Assign name='x'>
						<Call name='real'>
							<Variable name='@parser'/>
							<Arguments/>
						</Call>
					</Assign>
					<Call name='parse'>
						<Args>
							<Str>20/5.0</Str>
						</Args>
					</Call>
					<Call name='assert_equals'>
						<Args>
							<Call name='result'/>
							<Num value='4'/>
						</Args>
					</Call>
				</Block>
			</Method>
			<Method name='current'>
				<Args/>
				<Call name='test_type1'/>
			</Method>
		</Block>
		<Const name='ParserBaseTest'/>
	</Class>
</Block>
