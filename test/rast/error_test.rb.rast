<Block>
	<GlobalAsgn name='$use_tree'>
		<False/>
	</GlobalAsgn>
	<GlobalAsgn name='$verbose'>
		<False/>
	</GlobalAsgn>
	<FCall name='require_relative'>
		<Array>
			<Str value='../parser_test_helper'/>
		</Array>
	</FCall>
	<Class>
		<Colon2Implicit name='ErrorTest'/>
		<Block>
			<FCall name='include'>
				<Array>
					<Const name='ParserTestHelper'/>
				</Array>
			</FCall>
			<Defn name='test_type'>
				<Argument name='test_type'/>
				<Args/>
				<FCall name='assert_has_error'>
					<Array>
						<Str value='x=1,2,y;'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_variable_type_safety_errors2'>
				<Argument name='test_variable_type_safety_errors2'/>
				<Args/>
				<Block>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str>char i='c'
						</Array>
					</FCall>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str>char i;i='c'
						</Array>
					</FCall>
				</Block>
			</Defn>
			<Defn name='test_variable_type_safety_errors'>
				<Argument name='test_variable_type_safety_errors'/>
				<Args/>
				<Block>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str value='an integer i;i=3'/>
						</Array>
					</FCall>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str value='int i=3'/>
						</Array>
					</FCall>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str value='int i;i=3'/>
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str value='const i=1;i=2'/>
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str value='string i=3'/>
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>int i='hi'
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>integer i='hi'
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>an integer i;i='hi'
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>const i=1;i='hi'
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>const i='hi';i='ho'
						</Array>
					</FCall>
				</Block>
			</Defn>
			<Defn name='test_assert_has_error'>
				<Argument name='test_assert_has_error'/>
				<Args/>
				<Begin>
					<Rescue>
						<RescueBody>
							<Block>
								<FCall name='assert_has_error'>
									<Array>
										<Str value='dfsafdsa ewdfsa}{P}{P;@#%'/>
									</Array>
								</FCall>
								<FCall name='puts'>
									<Array>
										<Str value='OK, HAS ERROR'/>
									</Array>
								</FCall>
							</Block>
						</RescueBody>
						<FCall name='assert_has_no_error'>
							<Array>
								<Str value='dfsafdsa ewdfsa}{P}{P;@#%'/>
							</Array>
						</FCall>
					</Rescue>
				</Begin>
			</Defn>
			<Defn name='test_type3'>
				<Argument name='test_type3'/>
				<Args/>
				<FCall name='assert_has_error'>
					<Array>
						<Str value='x be 1,2,3y= class of x'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_map'>
				<Argument name='test_map'/>
				<Args/>
				<FCall name='assert_has_error'>
					<Array>
						<Str value='square 1,2 andy 3'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_x'>
				<Argument name='test_x'/>
				<Args/>
				<FCall name='parse'>
					<Array>
						<Str value='x'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_endNode_as'>
				<Argument name='test_endNode_as'/>
				<Args/>
				<Block>
					<FCall name='init'>
						<Array>
							<Str value='as'/>
						</Array>
					</FCall>
					<Rescue>
						<RescueBody>
							<FCall name='assert_has_error'>
								<Array>
									<Str value='as'/>
								</Array>
							</FCall>
						</RescueBody>
						<Call name='arg'>
							<InstVar name='@parser'/>
							<List/>
						</Call>
					</Rescue>
				</Block>
			</Defn>
			<Defn name='test_rollback'>
				<Argument name='test_rollback'/>
				<Args/>
				<FCall name='assert_has_error'>
					<Array>
						<Str value='if 1>0 then else'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_endNode'>
				<Argument name='test_endNode'/>
				<Args/>
				<FCall name='assert_has_error'>
					<Array>
						<Str value='of'/>
					</Array>
				</FCall>
			</Defn>
			<Defn name='test_list_concatenation_unknownVariable'>
				<Argument name='test_list_concatenation_unknownVariable'/>
				<Args/>
				<Block>
					<AttrAssign name='[]='>
						<VCall name='variables'/>
						<Array>
							<Str value='x'/>
							<Str value='hi'/>
						</Array>
					</AttrAssign>
					<AttrAssign name='[]='>
						<VCall name='variables'/>
						<Array>
							<Str value='y'/>
							<Str value='world'/>
						</Array>
					</AttrAssign>
					<FCall name='assert_has_error'>
						<Array>
							<Str>z=x ' ' w
						</Array>
					</FCall>
					<VCall name='skip'/>
					<FCall name='assert'>
						<Array>
							<Str>z=x ' ' y
						</Array>
					</FCall>
					<FCall name='assert_has_error'>
						<Array>
							<Str>z=x ' ' y
						</Array>
					</FCall>
					<FCall name='assert_has_no_error'>
						<Array>
							<Str>z=x ' ' y
						</Array>
					</FCall>
				</Block>
			</Defn>
		</Block>
		<Const name='ParserBaseTest'/>
	</Class>
</Block>
