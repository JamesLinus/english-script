<?xml version="1.0" encoding="UTF-8" ?>
<schema
        xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="http://angle-lang.org"
        elementFormDefault="qualified"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:a="http://angle-lang.org"
        xsi:schemaLocation="http://www.w3.org/2007/XMLSchema-versioning"
        attributeFormDefault="unqualified" version="1.3" xml:lang="EN">

    <annotation>
        <documentation>This is the schema for the Kast universal AST</documentation>
        <appinfo>
            <!-- optional stuff what for?-->
            <title>Kast universal AST schema validation</title>
            <ns prefix="angle" uri="http://angle-lang.org/2015/KAST-1.0.0"/>
        </appinfo>
    </annotation>

    <!--<element name="expression" type="a:expression"/>-->
    <!--<element name="block" type="a:block"/>-->
    <element name="module" type="a:module"/>
    <element name="package" substitutionGroup="a:module"/>

    <element name="class" type="a:class"/>

    <element name="let" type="a:let"/>
    <element name="var" type="a:let"/>
    <element name="assign" type="a:let"/>
    <!--nicht ganz das gleiche!-->

    <!--<element name="set" type="a:MATH.SET!!!"/>-->

    <!--<element name="assignment" type="a:let"/>-->
    <!--<element name="set_variable" type="a:let"/>-->
    <!--<element name="defvar" type="a:let"/>-->
    <!--Mark element as deprecated in XSD ? => annotation only 'workaround'-->

    <element name="call" type="a:call"/>
    <element name="construct" substitutionGroup="a:call"/>
    <element name="invoke" substitutionGroup="a:call"/>
    <element name="invocation" substitutionGroup="a:call"/>

    <element name="method" type="a:method"/>
    <element name="function" substitutionGroup="a:method"/>
    <element name="def" substitutionGroup="a:method"/>
    <element name="fun" substitutionGroup="a:method"/>
    <!-- Aliases, KINDA ^^ -->

    <xs:group name="expressions">
        <xs:choice>
            <element name="expression" type="a:expression"/>
            <element name="body" type="a:body"/>
            <element name="statement" type="a:statement"/>
            <element name="method" type="a:method"/>
            <element name="def" type="a:method"/>
            <element name="let" type="a:let"/>
            <element name="call" type="a:call"/>
            <element name="value" type="a:value"/>
            <element name="int" type="a:int"/>
            <element name="if" type="a:if"/>
            <element name="for" type="a:for"/>
            <element name="construct" type="a:call"/>
            <!--<element name="condition" type="a:expression"/>-->
            <element name="condition" type="a:valueOrExpression"/>
        </xs:choice>
    </xs:group>

    <complexType name="block">
        <choice maxOccurs="unbounded" minOccurs="0">
            <group ref="a:expressions"/>
        </choice>
        <!--<attribute name="name" type="string" use="optional"/>-->
    </complexType>


    <!-- mixed="true" really? what does text mean??-->
    <complexType name="expression">
        <!--<all minOccurs="1"> any order and MUST occur once!-->
        <!--<all minOccurs="0">-->
        <choice maxOccurs="1" minOccurs="0">
            <!--<sequence minOccurs="0" maxOccurs="1">-->
            <group ref="a:expressions"/>
        </choice>
        <!--</sequence>-->
        <!--</all>-->
    </complexType>

    <complexType name="module">
        <!--<complexContent>-->
        <!--<extension base="a:block">-->
        <choice maxOccurs="unbounded">
            <!-- ^^ allow any code in file-->
            <element name="import" type="a:import"/>
            <element name="class" type="a:class"/>
            <!--<element name="decorators" type="a:decorators"/>-->
            <xs:group ref="a:expressions"/>
        </choice>
        <!--<attribute name="decorators" type="a:decorator_list"/>-->
        <attribute name="name" type="string"/>
        <attribute name="parent" type="string"/>
        <attribute name="enabled" type="boolean" use="optional"/>
        <attribute name="implicit-return" type="boolean" use="optional"/>
        <!--todo: put implicit-return in meta header-->
        <!--</extension>-->
        <!--</complexContent>-->
    </complexType>

    <complexType name="class">
        <complexContent>
            <extension base="a:block">
                <!--<choice maxOccurs="unbounded">-->
                <!--<element name="name" type="string"/>-->
                <!--</choice>-->
                <attribute name="name" type="string" use="required"/>
                <attribute name="enabled" type="boolean" use="optional"/>
            </extension>
        </complexContent>
    </complexType>


    <complexType name="method">
        <choice maxOccurs="unbounded">
            <element name="name" type="string"/>
            <element name="let" type="a:let"/>
            <element name="return" type="a:valueOrExpression"/>
        </choice>
        <attribute name="name" type="string"/>
        <attribute name="args" type="a:args"/>
        <attribute name="static" type="boolean"/>
        <attribute name="returns" type="a:type"/>

    </complexType>

    <simpleType name="url">
        <restriction base="xs:anyURI"/>
    </simpleType>

    <simpleType name="args">
        <restriction base="xs:string">
            <minLength value="0"/>
            <pattern value="\[((\w)+,?)*\]"/>
        </restriction>
    </simpleType>

    <!--<complexType name="args" >-->
    <!--</complexType>-->
    <complexType name="body">
        <choice maxOccurs="unbounded">
            <element name="inline_method" type="a:method"/>
        </choice>
    </complexType>

    <complexType name="let">
        <complexContent>
            <extension base="a:valueOrExpression">
                <attribute name="var" type="a:variable"/>
                <attribute name="modifier" type="a:variable-modifier"/>
                <attribute name="modifiers" type="a:variable-modifiers"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="call">
        <complexContent>
            <extension base="a:expression">
                <choice maxOccurs="unbounded" minOccurs="0">
                    <element name="argument" type="a:argument"/>
                </choice>
                <attribute name="object" type="a:variable"/>
                <attribute name="method" type="a:methodName"/>
                <attribute name="argument" type="a:valueOrVariable"/>
            </extension>
        </complexContent>
    </complexType>


    <simpleType name="variable">
        <restriction base="string"/>
    </simpleType>

    <simpleType name="methodName">
        <restriction base="string"/>
    </simpleType>

    <simpleType name="int">
        <restriction base="integer"/>
    </simpleType>

    <complexType name="if">
        <complexContent>
            <extension base="a:expression">
                <!--<extension base="a:statement">-->
                <choice maxOccurs="unbounded">
                    <element name="else" type="a:valueOrExpression"/>
                    <element name="then" type="a:valueOrExpression"/>
                    <element name="condition" type="a:valueOrExpression"/>
                    <!--<element name="test" type="a:valueOrExpression"/>-->
                </choice>
                <attribute name="exists" type="a:variable"/>
                <!-- diabetes!-->
                <attribute name="negate" type="boolean"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="value">
        <complexContent>
            <extension base="a:expression">
            </extension>
        </complexContent>
    </complexType>

    <complexType name="statement">
        <complexContent>
            <extension base="a:expression">
            </extension>
        </complexContent>
    </complexType>

    <complexType name="modifiers">
        <xsd:sequence minOccurs="0" maxOccurs="unbounded">
            <xsd:choice>
                <xs:element name="public" type="xsd:string"/>
                <xs:element name="protected" type="xsd:string"/>
                <xs:element name="static" type="xsd:string"/>
                <xs:element name="private" type="xsd:string"/>
            </xsd:choice>
        </xsd:sequence>
    </complexType>

    <simpleType name="variable-modifier">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="final"/>
            <xsd:enumeration value="protected"/>
            <xsd:enumeration value="static"/>
            <xsd:enumeration value="global"/>
            <xsd:enumeration value="const"/>
            <xsd:enumeration value="constant"/>
        </xsd:restriction>
    </simpleType>


    <simpleType name="variable-modifiers">
        <xs:list itemType="a:variable-modifier"/>
    </simpleType>


    <complexType name="import">
        <attribute name="package" use="required"/>
        <attribute name="from"/>
        <attribute name="as"/>
        <attribute name="pattern"/>
    </complexType>

    <complexType name="argument">
        <complexContent>
            <extension base="a:valueOrExpression">
                <attribute name="name"/>
            </extension>
        </complexContent>
    </complexType>

    <simpleType name="type">
        <restriction base="string"/>
    </simpleType>

    <simpleType name="valueType">
        <!-- todo : int, float, ...-->
        <restriction base="string"/>
    </simpleType>

    <simpleType name="valueOrVariable">
        <union memberTypes="a:valueType a:variable"/>
    </simpleType>


    <!--<complexType name="construct">-->
    <!--<annotation>-->
    <!--<documentation>-->
    <!--Use construct(object=type) , not construct(type=type)-->
    <!--</documentation>-->
    <!--</annotation>-->
    <!--<complexContent>-->
    <!--<extension base="a:call">-->
    <!--<attribute name="object"/>-->
    <!--<attribute name="type" use="prohibited"/>-->
    <!--</extension>-->
    <!--</complexContent>-->
    <!--</complexType>-->


    <!--mixed="true" means it can have TEXT too !!!-->
    <!--<complexType name="condition"  mixed="true">-->
    <!--<complexContent mixed="true">-->
    <!--<extension base="a:valueOrExpression"/>-->
    <!--</complexContent>-->
    <!--</complexType>-->

    <complexType name="valueOrExpression" mixed="true">
        <!--<complexContent  mixed="true">-->
        <!--<extension base="a:expression">-->

        <!--<sequence minOccurs="1" maxOccurs="1">-->
        <!--<element name="body" type="a:expression"/>-->
        <!--</choice>-->
        <choice minOccurs="0" maxOccurs="1">
            <group ref="a:expressions"/>
        </choice>
        <attribute name="value" type="a:valueType"/>
        <!--</extension>-->
        <!--</complexContent>-->
    </complexType>

    <complexType name="for">
        <sequence>
            <element name="target" type="a:variable"/>
            <!-- todo for x in list -> for x:String in list / for(String x : list)-->

            <element name="iter" type="a:expression"/>
            <element name="body" type="a:block"/>
        </sequence>
        <attribute name="target" type="a:variable"/>
    </complexType>
</schema>
